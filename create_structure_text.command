#!/usr/bin/env python3
import os
import sys

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---

# –ò–º—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
OUTPUT_FILENAME = 'project_structure.txt'

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
MAX_DEPTH = 10

# --- –ö–û–ù–ï–¶ –ù–ê–°–¢–†–û–ï–ö ---


def create_tree_structure(path, prefix="", depth=0, is_last=True):
    """
    –°–æ–∑–¥–∞–µ—Ç –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    –ë–ï–ó –§–ò–õ–¨–¢–†–ê–¶–ò–ò - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –í–°–ï —Ñ–∞–π–ª—ã
    """
    if depth > MAX_DEPTH:
        return ""
    
    name = os.path.basename(path) or path
    
    result = ""
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
    if depth > 0:
        connector = "‚îî‚îÄ‚îÄ " if is_last else "‚îú‚îÄ‚îÄ "
        result += prefix + connector + name
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
        if os.path.isfile(path):
            ext = os.path.splitext(name)[1]
            file_types = {
                '.py': ' (Python)',
                '.js': ' (JavaScript)',
                '.json': ' (JSON)',
                '.md': ' (Markdown)',
                '.txt': ' (Text)',
                '.yml': ' (YAML)',
                '.yaml': ' (YAML)',
                '.sh': ' (Shell)',
                '.command': ' (Command)',
                '.env': ' (Environment)',
                '.sql': ' (SQL)',
                '.html': ' (HTML)',
                '.css': ' (CSS)',
                '.dockerfile': ' (Docker)',
                '.ps1': ' (PowerShell)',
                '.diff': ' (Diff/Patch)',
                '.example': ' (Example)',
                '.pyc': ' (Python Compiled)',
                '.applescript': ' (AppleScript)'
            }
            result += file_types.get(ext.lower(), '')
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            try:
                size = os.path.getsize(path)
                if size < 1024:
                    result += f" [{size} B]"
                elif size < 1024*1024:
                    result += f" [{size/1024:.1f} KB]"
                else:
                    result += f" [{size/(1024*1024):.1f} MB]"
            except:
                pass
                
        result += "\n"
    
    # –ï—Å–ª–∏ —ç—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –í–°–Å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    if os.path.isdir(path):
        try:
            items = os.listdir(path)  # –ë–µ—Ä—ë–º –í–°–ï —Ñ–∞–π–ª—ã
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º: —Å–Ω–∞—á–∞–ª–∞ –ø–∞–ø–∫–∏, –ø–æ—Ç–æ–º —Ñ–∞–π–ª—ã
            items.sort(key=lambda x: (not os.path.isdir(os.path.join(path, x)), x.lower()))
            
            for i, item in enumerate(items):
                item_path = os.path.join(path, item)
                is_last_item = (i == len(items) - 1)
                
                if depth > 0:
                    extension = "    " if is_last else "‚îÇ   "
                    new_prefix = prefix + extension
                else:
                    new_prefix = ""
                
                result += create_tree_structure(item_path, new_prefix, depth + 1, is_last_item)
                
        except PermissionError:
            result += prefix + "    [Permission Denied]\n"
    
    return result


def create_summary(path):
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –í–°–ï–• —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
    file_count = 0
    dir_count = 0
    total_size = 0
    file_types = {}
    hidden_files = 0
    
    for root, dirs, files in os.walk(path):
        dir_count += len(dirs)
        
        for file in files:
            file_count += 1
            file_path = os.path.join(root, file)
            
            # –°—á–∏—Ç–∞–µ–º —Å–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã
            if file.startswith('.'):
                hidden_files += 1
            
            # –°—á–∏—Ç–∞–µ–º —Ä–∞–∑–º–µ—Ä
            try:
                total_size += os.path.getsize(file_path)
            except:
                pass
            
            # –°—á–∏—Ç–∞–µ–º —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤
            ext = os.path.splitext(file)[1].lower()
            if ext:
                file_types[ext] = file_types.get(ext, 0) + 1
            else:
                file_types['[no extension]'] = file_types.get('[no extension]', 0) + 1
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä
    if total_size < 1024*1024:
        size_str = f"{total_size/1024:.1f} KB"
    else:
        size_str = f"{total_size/(1024*1024):.2f} MB"
    
    summary = f"""
–ü–û–õ–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–ï–ö–¢–ê:
==========================
–í—Å–µ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {dir_count}
–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {file_count}
–°–∫—Ä—ã—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤: {hidden_files}
–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {size_str}

–í–°–ï –¢–ò–ü–´ –§–ê–ô–õ–û–í:
"""
    
    for ext, count in sorted(file_types.items(), key=lambda x: x[1], reverse=True):
        summary += f"  {ext}: {count} —Ñ–∞–π–ª–æ–≤\n"
    
    return summary


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–∫—Ä–∏–ø—Ç
    script_path = os.path.realpath(__file__)
    script_dir = os.path.dirname(script_path)
    project_name = os.path.basename(script_dir)
    
    print(f"üìÇ –°–æ–∑–¥–∞—é –ü–û–õ–ù–£–Æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞: {project_name}")
    print(f"üìç –ü—É—Ç—å: {script_dir}")
    print(f"‚ö†Ô∏è  –í–∫–ª—é—á–µ–Ω—ã –í–°–ï —Ñ–∞–π–ª—ã (–≤–∫–ª—é—á–∞—è —Å–∫—Ä—ã—Ç—ã–µ, —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∏ —Ç.–¥.)\n")
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    header = f"""PROJECT STRUCTURE (FULL): {project_name}
{"=" * (26 + len(project_name))}
Path: {script_dir}
Generated: {os.popen('date').read().strip()}
Mode: SHOW ALL FILES (no filtering)

–ü–û–õ–ù–ê–Ø –§–ê–ô–õ–û–í–ê–Ø –°–¢–†–£–ö–¢–£–†–ê:
==========================
"""
    
    # –°–æ–∑–¥–∞–µ–º –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    tree = project_name + "/\n"
    tree += create_tree_structure(script_dir, "", 0, True)
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—É—é —Å–≤–æ–¥–∫—É
    summary = create_summary(script_dir)
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
    all_files = "\n–ü–û–õ–ù–´–ô –°–ü–ò–°–û–ö –§–ê–ô–õ–û–í:\n"
    all_files += "=" * 20 + "\n"
    
    for root, dirs, files in os.walk(script_dir):
        rel_path = os.path.relpath(root, script_dir)
        if rel_path != '.':
            all_files += f"\nüìÅ {rel_path}/\n"
        else:
            all_files += f"\nüìÅ [root]/\n"
        
        for file in sorted(files):
            all_files += f"  ‚Ä¢ {file}\n"
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–º–µ—Å—Ç–µ
    full_content = header + tree + "\n" + summary + all_files
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    output_path = os.path.join(script_dir, OUTPUT_FILENAME)
    
    try:
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(full_content)
        
        print(f"‚úÖ –ü–û–õ–ù–ê–Ø —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {OUTPUT_FILENAME}")
        print(f"üìÑ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(full_content)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: –≤—Å–µ —Ñ–∞–π–ª—ã –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π")
        print("\nüìã –§–∞–π–ª –≥–æ—Ç–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏!")
        print("\n–ú–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —ç—Ç–æ –æ–∫–Ω–æ.")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
        print("\n–ú–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —ç—Ç–æ –æ–∫–Ω–æ.")


if __name__ == "__main__":
    main()