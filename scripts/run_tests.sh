#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ —Ä–µ—à–µ–Ω–∏—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞
# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç 3 —É—Ä–æ–≤–Ω—è: unit (30—Å), integration (2–º), e2e (15–º)

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –≤—ã–≤–æ–¥–∞
print_status() { echo -e "${BLUE}[INFO]${NC} $1"; }
print_success() { echo -e "${GREEN}[‚úì]${NC} $1"; }
print_warning() { echo -e "${YELLOW}[!]${NC} $1"; }
print_error() { echo -e "${RED}[‚úó]${NC} $1"; }

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
check_docker() {
    if ! command -v docker &> /dev/null; then
        print_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        exit 1
    fi
    
    if ! docker info &> /dev/null; then
        print_error "Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω!"
        exit 1
    fi
}

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
start_test_env() {
    print_status "–ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ..."
    
    # –°–æ–∑–¥–∞–µ–º docker-compose.test.yml –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if [ ! -f "docker-compose.test.yml" ]; then
        cat > docker-compose.test.yml << 'EOF'
version: '3.8'

services:
  test-db:
    image: postgres:15
    environment:
      POSTGRES_DB: test_botdb
      POSTGRES_USER: test_bot
      POSTGRES_PASSWORD: test_pass
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_bot -d test_botdb"]
      interval: 5s
      timeout: 5s
      retries: 5
      
  test-redis:
    image: redis:7
    ports:
      - "6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
EOF
    fi
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    docker-compose -f docker-compose.test.yml up -d
    
    # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    print_status "–ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ë–î..."
    sleep 5
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î
    print_status "–ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏..."
    TEST_DB_PORT=5433 python admin/manage.py migrate --run-syncdb 2>/dev/null || true
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
stop_test_env() {
    print_status "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ..."
    docker-compose -f docker-compose.test.yml down
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç–æ–≤
install_test_deps() {
    if [ ! -f ".test_deps_installed" ]; then
        print_status "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤..."
        pip install -q -r requirements-test.txt
        
        # Playwright –¥–ª—è E2E –∞–¥–º–∏–Ω–∫–∏
        pip install -q playwright pytest-playwright
        playwright install chromium --with-deps
        
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: Pyrogram –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö Telegram —Ç–µ—Å—Ç–æ–≤
        if [ -f ".env.test" ]; then
            pip install -q pyrogram tgcrypto
        fi
        
        touch .test_deps_installed
    fi
}

# Unit —Ç–µ—Å—Ç—ã (–±—ã—Å—Ç—Ä—ã–µ, 30 —Å–µ–∫)
run_unit_tests() {
    print_status "–ó–∞–ø—É—Å–∫–∞–µ–º Unit —Ç–µ—Å—Ç—ã (—Ü–µ–ª—å: <30 —Å–µ–∫)..."
    start_time=$(date +%s)
    
    pytest tests/unit/ -v --tb=short --timeout=10 \
        --cov=bot --cov=admin \
        --cov-report=term-missing:skip-covered \
        --cov-report=html:htmlcov/unit
    
    end_time=$(date +%s)
    duration=$((end_time - start_time))
    
    if [ $duration -le 30 ]; then
        print_success "Unit —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã –∑–∞ ${duration} —Å–µ–∫ ‚úÖ"
    else
        print_warning "Unit —Ç–µ—Å—Ç—ã –∑–∞–Ω—è–ª–∏ ${duration} —Å–µ–∫ (—Ü–µ–ª—å: 30 —Å–µ–∫)"
    fi
}

# Integration —Ç–µ—Å—Ç—ã (2 –º–∏–Ω—É—Ç—ã)
run_integration_tests() {
    print_status "–ó–∞–ø—É—Å–∫–∞–µ–º Integration —Ç–µ—Å—Ç—ã (—Ü–µ–ª—å: <2 –º–∏–Ω)..."
    start_test_env
    start_time=$(date +%s)
    
    pytest tests/integration/ -v --tb=short --timeout=30 \
        --cov=bot --cov=admin \
        --cov-report=term-missing:skip-covered \
        --cov-report=html:htmlcov/integration
    
    local result=$?
    end_time=$(date +%s)
    duration=$((end_time - start_time))
    
    stop_test_env
    
    if [ $duration -le 120 ]; then
        print_success "Integration —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã –∑–∞ $((duration/60))–º $((duration%60))—Å ‚úÖ"
    else
        print_warning "Integration —Ç–µ—Å—Ç—ã –∑–∞–Ω—è–ª–∏ $((duration/60))–º $((duration%60))—Å (—Ü–µ–ª—å: 2 –º–∏–Ω)"
    fi
    
    return $result
}

# E2E —Ç–µ—Å—Ç—ã (15 –º–∏–Ω—É—Ç)
run_e2e_tests() {
    print_status "–ó–∞–ø—É—Å–∫–∞–µ–º E2E —Ç–µ—Å—Ç—ã (—Ü–µ–ª—å: <15 –º–∏–Ω)..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—â–µ–Ω –ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–µ–∫—Ç
    if ! docker ps | grep -q "tg-bot"; then
        print_warning "–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–µ–∫—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å–∫–∞–µ–º..."
        docker-compose up -d
        sleep 10
    fi
    
    start_time=$(date +%s)
    
    # E2E –∞–¥–º–∏–Ω–∫–∏ (Playwright)
    print_status "E2E —Ç–µ—Å—Ç—ã –∞–¥–º–∏–Ω–∫–∏..."
    pytest tests/e2e/admin/ -v --tb=short --timeout=60 \
        --cov=admin \
        --cov-report=term-missing:skip-covered
    
    # E2E Telegram (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
    if [ "${ENABLE_E2E_TELEGRAM}" = "1" ]; then
        if [ -f ".env.test" ]; then
            print_status "E2E —Ç–µ—Å—Ç—ã Telegram (—Ä–µ–∞–ª—å–Ω—ã–µ)..."
            source .env.test
            pytest tests/e2e/telegram/ -v --tb=short --timeout=120 \
                --cov=bot \
                --cov-report=term-missing:skip-covered
        else
            print_warning ".env.test –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ Telegram —Ç–µ—Å—Ç—ã"
        fi
    else
        print_warning "E2E Telegram —Ç–µ—Å—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã (—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ENABLE_E2E_TELEGRAM=1)"
    fi
    
    end_time=$(date +%s)
    duration=$((end_time - start_time))
    
    if [ $duration -le 900 ]; then
        print_success "E2E —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã –∑–∞ $((duration/60))–º $((duration%60))—Å ‚úÖ"
    else
        print_warning "E2E —Ç–µ—Å—Ç—ã –∑–∞–Ω—è–ª–∏ $((duration/60))–º $((duration%60))—Å (—Ü–µ–ª—å: 15 –º–∏–Ω)"
    fi
}

# –û—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏
generate_coverage_report() {
    print_status "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏..."
    
    coverage combine 2>/dev/null || true
    coverage report
    coverage html
    
    total_coverage=$(coverage report | grep TOTAL | awk '{print $4}' | sed 's/%//')
    
    if [ "${total_coverage%.*}" -ge 80 ]; then
        print_success "–ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞: ${total_coverage}% (—Ü–µ–ª—å: 80%) üéâ"
    elif [ "${total_coverage%.*}" -ge 60 ]; then
        print_warning "–ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞: ${total_coverage}% (–º–∏–Ω–∏–º—É–º: 60%, —Ü–µ–ª—å: 80%)"
    else
        print_error "–ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞: ${total_coverage}% (–Ω–∏–∂–µ –º–∏–Ω–∏–º—É–º–∞ 60%!)"
        exit 1
    fi
    
    print_status "HTML –æ—Ç—á–µ—Ç: htmlcov/index.html"
}

# Smoke —Ç–µ—Å—Ç—ã (–±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
run_smoke_tests() {
    print_status "–ó–∞–ø—É—Å–∫–∞–µ–º Smoke —Ç–µ—Å—Ç—ã..."
    pytest -v -m smoke --tb=short --timeout=5
    print_success "Smoke —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã"
}

# Pre-commit –ø—Ä–æ–≤–µ—Ä–∫–∞ (–¥–ª—è git hook)
run_precommit() {
    print_status "Pre-commit –ø—Ä–æ–≤–µ—Ä–∫–∞..."
    
    # –¢–æ–ª—å–∫–æ –±—ã—Å—Ç—Ä—ã–µ unit —Ç–µ—Å—Ç—ã
    pytest tests/unit/ -q --tb=line --timeout=10
    
    # –õ–∏–Ω—Ç–µ—Ä—ã (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã)
    if command -v black &> /dev/null; then
        black --check bot/ admin/
    fi
    
    if command -v flake8 &> /dev/null; then
        flake8 bot/ admin/ --max-line-length=120
    fi
    
    print_success "Pre-commit –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞"
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    check_docker
    install_test_deps
    
    case "${1:-all}" in
        unit)
            run_unit_tests
            ;;
        integration)
            run_integration_tests
            ;;
        e2e)
            run_e2e_tests
            ;;
        smoke)
            run_smoke_tests
            ;;
        precommit)
            run_precommit
            ;;
        coverage)
            run_unit_tests
            run_integration_tests
            generate_coverage_report
            ;;
        all)
            print_status "–ó–∞–ø—É—Å–∫ –í–°–ï–• —Ç–µ—Å—Ç–æ–≤..."
            run_unit_tests
            run_integration_tests
            run_e2e_tests
            generate_coverage_report
            ;;
        *)
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 {unit|integration|e2e|smoke|precommit|coverage|all}"
            echo ""
            echo "  unit         - –ë—ã—Å—Ç—Ä—ã–µ unit-—Ç–µ—Å—Ç—ã (<30 —Å–µ–∫)"
            echo "  integration  - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å –ë–î (<2 –º–∏–Ω)"
            echo "  e2e          - End-to-end —Ç–µ—Å—Ç—ã (<15 –º–∏–Ω)"
            echo "  smoke        - –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞"
            echo "  precommit    - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º"
            echo "  coverage     - –ü–æ–ª–Ω—ã–π –ø—Ä–æ–≥–æ–Ω —Å –æ—Ç—á–µ—Ç–æ–º –æ –ø–æ–∫—Ä—ã—Ç–∏–∏"
            echo "  all          - –í—Å–µ —Ç–µ—Å—Ç—ã + –æ—Ç—á–µ—Ç"
            echo ""
            echo "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:"
            echo "  ENABLE_E2E_TELEGRAM=1  - –í–∫–ª—é—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ Telegram —Ç–µ—Å—Ç—ã"
            echo "  DEBUG_TESTS=1          - –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"
            exit 1
            ;;
    esac
}

# –ó–∞–ø—É—Å–∫
main "$@"