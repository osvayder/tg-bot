#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
NinjaOsvayder - Telegram –±–æ—Ç –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ
MVP –≤–µ—Ä—Å–∏—è: —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≤–∏–¥–µ–æ/–∞—É–¥–∏–æ —á–µ—Ä–µ–∑ Google Cloud Speech-to-Text
"""

import os
import logging
import tempfile
from pathlib import Path
from datetime import datetime
import time

from telegram import Update, Message
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.constants import ParseMode

import moviepy.editor as mp
from google.cloud import speech_v1
from google.oauth2 import service_account
from pydub import AudioSegment
from pydub.utils import make_chunks

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
SERVICE_ACCOUNT_FILE = 'service_account.json'
TEMP_DIR = Path('temp_files')
TEMP_DIR.mkdir(exist_ok=True)

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è Telegram (50 MB)
MAX_FILE_SIZE = 50 * 1024 * 1024

class TranscriptionBot:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ Speech-to-Text –∫–ª–∏–µ–Ω—Ç–∞"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Cloud Speech-to-Text
        credentials = service_account.Credentials.from_service_account_file(
            SERVICE_ACCOUNT_FILE
        )
        self.speech_client = speech_v1.SpeechClient(credentials=credentials)
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        welcome_message = """
ü•∑ *NinjaOsvayder Bot* - –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ç–æ—Ä!

üìπ *–ß—Ç–æ —è —É–º–µ—é:*
‚Ä¢ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–ª–∏–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏

üì§ *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∏–¥–µ–æ –∏–ª–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª, –∏ —è –≤–µ—Ä–Ω—É –≤–∞–º –ø–æ–ª–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é!

‚ö° *–ö–æ–º–∞–Ω–¥—ã:*
/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/help - –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞

_–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 50 MB_
"""
        await update.message.reply_text(
            welcome_message, 
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = """
üìñ *–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é NinjaOsvayder Bot*

*–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:*
‚Ä¢ –í–∏–¥–µ–æ: MP4, AVI, MOV, MKV, WebM
‚Ä¢ –ê—É–¥–∏–æ: MP3, WAV, OGG, M4A, FLAC

*–ü—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏:*
1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ/–∞—É–¥–∏–æ —Ñ–∞–π–ª –±–æ—Ç—É
2Ô∏è‚É£ –ë–æ—Ç —Å–∫–∞—á–∞–µ—Ç –∏ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç —Ñ–∞–π–ª
3Ô∏è‚É£ –ï—Å–ª–∏ —ç—Ç–æ –≤–∏–¥–µ–æ - –∏–∑–≤–ª–µ—á–µ—Ç –∞—É–¥–∏–æ –¥–æ—Ä–æ–∂–∫—É
4Ô∏è‚É£ –í—ã–ø–æ–ª–Ω–∏—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —á–µ—Ä–µ–∑ Google Speech-to-Text
5Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç

*–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:*
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 50 MB
‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –¥–æ 60 –º–∏–Ω—É—Ç
‚Ä¢ –Ø–∑—ã–∫: —Ä—É—Å—Å–∫–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)

*–°–æ–≤–µ—Ç—ã:*
‚Ä¢ –î–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞–ø–∏—Å–∏ —Å —á–µ—Ç–∫–æ–π —Ä–µ—á—å—é
‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ —Å–∏–ª—å–Ω—ã—Ö —Ñ–æ–Ω–æ–≤—ã—Ö —à—É–º–æ–≤
‚Ä¢ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –±–∏—Ç—Ä–µ–π—Ç –∞—É–¥–∏–æ: 16-48 kHz

_–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –ù–∞–ø–∏—à–∏—Ç–µ @osvayder_
"""
        await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /status"""
        status_text = """
‚úÖ *–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: –ê–∫—Ç–∏–≤–µ–Ω*

üîß *–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*
‚Ä¢ Speech-to-Text: Google Cloud
‚Ä¢ –í–µ—Ä—Å–∏—è: MVP 1.0
‚Ä¢ –Ø–∑—ã–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: –†—É—Å—Å–∫–∏–π
‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞

üöÄ *–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!*
"""
        await update.message.reply_text(status_text, parse_mode=ParseMode.MARKDOWN)
    
    def extract_audio_from_video(self, video_path: str, audio_path: str):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞"""
        try:
            logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏–∑ {video_path}")
            video = mp.VideoFileClip(video_path)
            audio = video.audio
            audio.write_audiofile(audio_path, logger=None)
            video.close()
            audio.close()
            logger.info(f"–ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ: {audio_path}")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∞—É–¥–∏–æ: {e}")
            return False
    
    def convert_to_wav(self, input_path: str, output_path: str):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ –≤ WAV —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Speech-to-Text"""
        try:
            logger.info(f"–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ WAV: {input_path}")
            audio = AudioSegment.from_file(input_path)
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–æ–Ω–æ, 16kHz –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã Speech-to-Text
            audio = audio.set_channels(1)
            audio = audio.set_frame_rate(16000)
            audio.export(output_path, format="wav")
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ WAV: {output_path}")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ WAV: {e}")
            return False
    
    def transcribe_audio_chunk(self, audio_content: bytes) -> str:
        """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ –∞—É–¥–∏–æ"""
        try:
            audio = speech_v1.RecognitionAudio(content=audio_content)
            config = speech_v1.RecognitionConfig(
                encoding=speech_v1.RecognitionConfig.AudioEncoding.LINEAR16,
                sample_rate_hertz=16000,
                language_code="ru-RU",
                enable_automatic_punctuation=True,
                enable_word_time_offsets=False,
                model="latest_long"
            )
            
            response = self.speech_client.recognize(config=config, audio=audio)
            
            transcript = ""
            for result in response.results:
                transcript += result.alternatives[0].transcript + " "
            
            return transcript.strip()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —á–∞–Ω–∫–∞: {e}")
            return ""
    
    def transcribe_long_audio(self, wav_path: str) -> str:
        """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –¥–ª–∏–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ –ø–æ —á–∞—Å—Ç—è–º"""
        try:
            logger.info(f"–ù–∞—á–∞–ª–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Ñ–∞–π–ª–∞: {wav_path}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ
            audio = AudioSegment.from_wav(wav_path)
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏ –ø–æ 30 —Å–µ–∫—É–Ω–¥
            chunk_length_ms = 30000
            chunks = make_chunks(audio, chunk_length_ms)
            
            full_transcript = []
            total_chunks = len(chunks)
            
            for i, chunk in enumerate(chunks, 1):
                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ {i}/{total_chunks}")
                
                # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —á–∞–Ω–∫ –≤ –±–∞–π—Ç—ã
                with tempfile.NamedTemporaryFile(suffix='.wav') as tmp_file:
                    chunk.export(tmp_file.name, format="wav")
                    with open(tmp_file.name, 'rb') as f:
                        chunk_bytes = f.read()
                
                # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º —á–∞–Ω–∫
                chunk_transcript = self.transcribe_audio_chunk(chunk_bytes)
                if chunk_transcript:
                    full_transcript.append(chunk_transcript)
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                time.sleep(0.5)
            
            result = " ".join(full_transcript)
            logger.info(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª–∏–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ: {e}")
            return ""
    
    async def handle_video(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤"""
        message = update.message
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        if message.video.file_size > MAX_FILE_SIZE:
            await message.reply_text(
                "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50 MB",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        status_msg = await message.reply_text(
            "üì• *–ü–æ–ª—É—á–µ–Ω –≤–∏–¥–µ–æ —Ñ–∞–π–ª*\n‚è≥ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...",
            parse_mode=ParseMode.MARKDOWN
        )
        
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            video_path = TEMP_DIR / f"video_{timestamp}.mp4"
            audio_path = TEMP_DIR / f"audio_{timestamp}.mp3"
            wav_path = TEMP_DIR / f"audio_{timestamp}.wav"
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
            await status_msg.edit_text(
                "üì• *–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ...*",
                parse_mode=ParseMode.MARKDOWN
            )
            
            file = await context.bot.get_file(message.video.file_id)
            await file.download_to_drive(video_path)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ
            await status_msg.edit_text(
                "üéµ *–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –¥–æ—Ä–æ–∂–∫–∏...*",
                parse_mode=ParseMode.MARKDOWN
            )
            
            if not self.extract_audio_from_video(str(video_path), str(audio_path)):
                await status_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∞—É–¥–∏–æ")
                return
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV
            await status_msg.edit_text(
                "üîÑ *–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ...*",
                parse_mode=ParseMode.MARKDOWN
            )
            
            if not self.convert_to_wav(str(audio_path), str(wav_path)):
                await status_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ")
                return
            
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º
            await status_msg.edit_text(
                "üéØ *–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ...*\n_–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç_",
                parse_mode=ParseMode.MARKDOWN
            )
            
            transcript = self.transcribe_long_audio(str(wav_path))
            
            if not transcript:
                await status_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await status_msg.edit_text(
                "‚úÖ *–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*",
                parse_mode=ParseMode.MARKDOWN
            )
            
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            if len(transcript) > 4000:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
                txt_path = TEMP_DIR / f"transcript_{timestamp}.txt"
                with open(txt_path, 'w', encoding='utf-8') as f:
                    f.write(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≤–∏–¥–µ–æ –æ—Ç {datetime.now().strftime('%d.%m.%Y %H:%M')}\n")
                    f.write("=" * 50 + "\n\n")
                    f.write(transcript)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                with open(txt_path, 'rb') as f:
                    await message.reply_document(
                        f,
                        filename=f"transcript_{timestamp}.txt",
                        caption="üìù *–ü–æ–ª–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≤–∏–¥–µ–æ*",
                        parse_mode=ParseMode.MARKDOWN
                    )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ 4000 —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                preview = transcript[:3900] + "...\n\n_–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª–µ –≤—ã—à–µ_"
                await message.reply_text(
                    f"üìù *–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è (–ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä):*\n\n{preview}",
                    parse_mode=ParseMode.MARKDOWN
                )
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
                os.remove(txt_path)
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                await message.reply_text(
                    f"üìù *–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:*\n\n{transcript}",
                    parse_mode=ParseMode.MARKDOWN
                )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {e}")
            await status_msg.edit_text(
                f"‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:*\n`{str(e)}`",
                parse_mode=ParseMode.MARKDOWN
            )
        
        finally:
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            for path in [video_path, audio_path, wav_path]:
                if path.exists():
                    try:
                        os.remove(path)
                    except:
                        pass
    
    async def handle_audio(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤"""
        message = update.message
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        audio = message.audio or message.voice
        if audio.file_size > MAX_FILE_SIZE:
            await message.reply_text(
                "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50 MB",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        status_msg = await message.reply_text(
            "üéµ *–ü–æ–ª—É—á–µ–Ω –∞—É–¥–∏–æ —Ñ–∞–π–ª*\n‚è≥ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...",
            parse_mode=ParseMode.MARKDOWN
        )
        
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            audio_path = TEMP_DIR / f"audio_{timestamp}.ogg"
            wav_path = TEMP_DIR / f"audio_{timestamp}.wav"
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ
            await status_msg.edit_text(
                "üì• *–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ...*",
                parse_mode=ParseMode.MARKDOWN
            )
            
            file = await context.bot.get_file(audio.file_id)
            await file.download_to_drive(audio_path)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV
            await status_msg.edit_text(
                "üîÑ *–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ...*",
                parse_mode=ParseMode.MARKDOWN
            )
            
            if not self.convert_to_wav(str(audio_path), str(wav_path)):
                await status_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ")
                return
            
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º
            await status_msg.edit_text(
                "üéØ *–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ...*\n_–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç_",
                parse_mode=ParseMode.MARKDOWN
            )
            
            transcript = self.transcribe_long_audio(str(wav_path))
            
            if not transcript:
                await status_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await status_msg.edit_text(
                "‚úÖ *–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*",
                parse_mode=ParseMode.MARKDOWN
            )
            
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            if len(transcript) > 4000:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
                txt_path = TEMP_DIR / f"transcript_{timestamp}.txt"
                with open(txt_path, 'w', encoding='utf-8') as f:
                    f.write(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ –æ—Ç {datetime.now().strftime('%d.%m.%Y %H:%M')}\n")
                    f.write("=" * 50 + "\n\n")
                    f.write(transcript)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                with open(txt_path, 'rb') as f:
                    await message.reply_document(
                        f,
                        filename=f"transcript_{timestamp}.txt",
                        caption="üìù *–ü–æ–ª–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ*",
                        parse_mode=ParseMode.MARKDOWN
                    )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ 4000 —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                preview = transcript[:3900] + "...\n\n_–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª–µ –≤—ã—à–µ_"
                await message.reply_text(
                    f"üìù *–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è (–ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä):*\n\n{preview}",
                    parse_mode=ParseMode.MARKDOWN
                )
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
                os.remove(txt_path)
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                await message.reply_text(
                    f"üìù *–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:*\n\n{transcript}",
                    parse_mode=ParseMode.MARKDOWN
                )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ: {e}")
            await status_msg.edit_text(
                f"‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:*\n`{str(e)}`",
                parse_mode=ParseMode.MARKDOWN
            )
        
        finally:
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            for path in [audio_path, wav_path]:
                if path.exists():
                    try:
                        os.remove(path)
                    except:
                        pass

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
    from dotenv import load_dotenv
    load_dotenv()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    bot_token = os.getenv('BOT_TOKEN')
    
    if not bot_token:
        logger.error("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")
        return
    
    if not os.path.exists(SERVICE_ACCOUNT_FILE):
        logger.error(f"–§–∞–π–ª {SERVICE_ACCOUNT_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    bot = TranscriptionBot()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(bot_token).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(CommandHandler("help", bot.help_command))
    application.add_handler(CommandHandler("status", bot.status_command))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤
    application.add_handler(MessageHandler(filters.VIDEO, bot.handle_video))
    application.add_handler(MessageHandler(filters.AUDIO, bot.handle_audio))
    application.add_handler(MessageHandler(filters.VOICE, bot.handle_audio))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("üöÄ NinjaOsvayder Bot –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
