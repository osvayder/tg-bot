# Generated by Django 5.0.4 on 2025-08-23 11:11

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='RawUpdate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chat_id', models.BigIntegerField()),
                ('message_id', models.BigIntegerField(blank=True, null=True)),
                ('user_id', models.BigIntegerField(blank=True, null=True)),
                ('username', models.CharField(blank=True, max_length=255, null=True)),
                ('text', models.TextField(blank=True, default='')),
                ('topic_id', models.BigIntegerField(blank=True, null=True)),
                ('payload', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Raw Update',
                'verbose_name_plural': 'Raw Updates',
                'db_table': 'raw_updates',
                'ordering': ['-created_at'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GroupProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True, verbose_name='Название профиля')),
                ('color', models.CharField(blank=True, max_length=32, verbose_name='Цвет')),
                ('emoji', models.CharField(blank=True, default='', max_length=8, verbose_name='Эмодзи')),
                ('is_template', models.BooleanField(default=False, verbose_name='Это шаблон')),
                ('shadow_mode', models.BooleanField(default=True, help_text='Бот читает сообщения, но не отвечает', verbose_name='Режим тени')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создан')),
            ],
            options={
                'verbose_name': 'Профиль группы',
                'verbose_name_plural': 'Профили групп',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='Название')),
                ('status', models.CharField(choices=[('active', 'Активен'), ('inactive', 'Неактивен')], default='active', max_length=16, verbose_name='Статус')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
            ],
            options={
                'verbose_name': 'Проект',
                'verbose_name_plural': 'Проекты',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True, verbose_name='Название')),
                ('can_assign', models.BooleanField(default=False, verbose_name='Может назначать')),
                ('can_close', models.BooleanField(default=False, verbose_name='Может закрывать')),
            ],
            options={
                'verbose_name': 'Роль',
                'verbose_name_plural': 'Роли',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('telegram_id', models.BigIntegerField(unique=True, verbose_name='Telegram ID')),
                ('username', models.CharField(blank=True, db_index=True, max_length=150, verbose_name='Имя пользователя')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='Имя')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='Фамилия')),
                ('status', models.CharField(choices=[('active', 'Активен'), ('inactive', 'Неактивен')], default='active', max_length=16, verbose_name='Статус')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата регистрации')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='Название')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='core.department', verbose_name='Родительский департамент')),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='departments', to='core.project', verbose_name='Проект')),
                ('lead_role', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.role', verbose_name='Ведущая роль')),
            ],
            options={
                'verbose_name': 'Департамент',
                'verbose_name_plural': 'Департаменты',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TgGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('telegram_id', models.BigIntegerField(unique=True, verbose_name='Telegram ID группы')),
                ('title', models.CharField(max_length=256, verbose_name='Название группы')),
                ('forward_topic_id', models.BigIntegerField(blank=True, null=True, verbose_name='ID топика для пересылки')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Добавлена')),
                ('forward_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='forward_sources', to='core.tggroup', verbose_name='Пересылать в группу')),
                ('profile', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.groupprofile', verbose_name='Профиль группы')),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.project', verbose_name='Проект')),
            ],
            options={
                'verbose_name': 'Telegram группа',
                'verbose_name_plural': 'Telegram группы',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ForumTopic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('topic_id', models.BigIntegerField(verbose_name='ID топика')),
                ('title', models.CharField(blank=True, max_length=256, verbose_name='Название')),
                ('first_seen', models.DateTimeField(auto_now_add=True, verbose_name='Впервые замечен')),
                ('last_seen', models.DateTimeField(auto_now=True, verbose_name='Последнее сообщение')),
                ('message_count', models.IntegerField(default=0, verbose_name='Сообщений')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='topics', to='core.tggroup', verbose_name='Группа')),
            ],
            options={
                'verbose_name': 'Топик',
                'verbose_name_plural': 'Топики',
                'ordering': ['group', 'title', 'topic_id'],
            },
        ),
        migrations.CreateModel(
            name='TopicRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('topic_id', models.BigIntegerField(verbose_name='ID топика')),
                ('department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.department', verbose_name='Департамент')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='topic_roles', to='core.tggroup', verbose_name='Группа')),
                ('role', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.role', verbose_name='Роль')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.user', verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Привязка топика',
                'verbose_name_plural': 'Привязки топиков',
            },
        ),
        migrations.CreateModel(
            name='TopicBinding',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('priority', models.PositiveSmallIntegerField(default=1, verbose_name='Приоритет (эскалация)')),
                ('is_primary', models.BooleanField(default=False, verbose_name='Основной')),
                ('department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.department', verbose_name='Департамент')),
                ('role', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.role', verbose_name='Роль')),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bindings', to='core.forumtopic', verbose_name='Топик')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.user', verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Связка топика',
                'verbose_name_plural': 'Связки топика',
                'ordering': ['priority', 'id'],
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=256, verbose_name='Заголовок')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('responsible_username', models.CharField(blank=True, max_length=64, verbose_name='Username ответственного')),
                ('deadline', models.DateField(blank=True, null=True, verbose_name='Дедлайн')),
                ('source_chat_id', models.BigIntegerField(blank=True, null=True, verbose_name='ID чата-источника')),
                ('source_message_id', models.BigIntegerField(blank=True, null=True, verbose_name='ID сообщения')),
                ('source_topic_id', models.BigIntegerField(blank=True, null=True, verbose_name='ID топика')),
                ('status', models.CharField(choices=[('TODO', 'К выполнению'), ('IN_PROGRESS', 'В работе'), ('ON_REVIEW', 'На проверке'), ('DONE', 'Выполнено'), ('ARCHIVED', 'В архиве')], default='TODO', max_length=16, verbose_name='Статус')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.project', verbose_name='Проект')),
                ('author_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='authored_tasks', to='core.user', verbose_name='Автор задачи')),
                ('responsible_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='core.user', verbose_name='Ответственный')),
            ],
            options={
                'verbose_name': 'Задача',
                'verbose_name_plural': 'Задачи',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProjectMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Назначен')),
                ('department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.department', verbose_name='Департамент')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.project', verbose_name='Проект')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.role', verbose_name='Роль')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.user', verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Участник проекта',
                'verbose_name_plural': 'Участники проектов',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='DepartmentMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_index', models.PositiveIntegerField(default=0, verbose_name='Порядок')),
                ('is_lead', models.BooleanField(default=False, verbose_name='Ответственный за направление')),
                ('is_tech', models.BooleanField(default=False, verbose_name='Технический ответственный')),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='members', to='core.department', verbose_name='Департамент')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.role', verbose_name='Роль')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.user', verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Состав департамента',
                'verbose_name_plural': 'Состав департамента',
                'ordering': ['order_index', 'user__username'],
            },
        ),
        migrations.AddIndex(
            model_name='department',
            index=models.Index(fields=['project', 'parent'], name='core_depart_project_da20b7_idx'),
        ),
        migrations.AddConstraint(
            model_name='forumtopic',
            constraint=models.UniqueConstraint(fields=('group', 'topic_id'), name='uniq_forum_topic'),
        ),
        migrations.AddConstraint(
            model_name='topicrole',
            constraint=models.UniqueConstraint(fields=('group', 'topic_id'), name='uniq_group_topic'),
        ),
        migrations.AddConstraint(
            model_name='topicbinding',
            constraint=models.UniqueConstraint(fields=('topic', 'priority'), name='uniq_topic_priority'),
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['status', 'deadline'], name='core_task_status_c090db_idx'),
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['responsible_username'], name='core_task_respons_fb9940_idx'),
        ),
        migrations.AddConstraint(
            model_name='projectmember',
            constraint=models.UniqueConstraint(condition=models.Q(('department__isnull', True)), fields=('project', 'user', 'role'), name='pm_unique_role_project_level'),
        ),
        migrations.AddConstraint(
            model_name='projectmember',
            constraint=models.UniqueConstraint(condition=models.Q(('department__isnull', False)), fields=('project', 'user', 'role', 'department'), name='pm_unique_role_department_level'),
        ),
        migrations.AddIndex(
            model_name='departmentmember',
            index=models.Index(fields=['department'], name='core_depart_departm_36f64e_idx'),
        ),
        migrations.AddConstraint(
            model_name='departmentmember',
            constraint=models.UniqueConstraint(fields=('department', 'user'), name='uniq_department_user'),
        ),
    ]
